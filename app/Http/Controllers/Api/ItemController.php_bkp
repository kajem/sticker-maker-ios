<?php

namespace App\Http\Controllers\Api;

use Illuminate\Http\Request;
use App\Category;
use App\Item;
use App\ItemSticker;
use App\ItemStickerThumbnail;
use App\Http\Controllers\Controller;
use Intervention\Image\Facades\Image;

class ItemController extends Controller
{
    /**
     * Create a new controller instance
     *
     * @return void
     */

    public function __construct()
    {
        $this->middleware('api_auth');
    }
    public function getCategoryAndItems(Request $request){
        $page = !empty($request->get('page')) ? $request->get('page') : 0;
        if(!is_numeric($page))
            return $this->errorOutput('Page should be numeric.');

        if(!empty($request->get('item_limit')) && !is_numeric($request->get('item_limit')))
            return $this->errorOutput('Item Limit should be numeric.');

        $category_limit = !empty($request->get('category_limit')) ? $request->get('category_limit') : 0;
        if(!is_numeric($category_limit))
            return $this->errorOutput('Category Limit should be numeric.');

        $categories = Category::query();
        if(!empty($category_limit)){
            $categories = $categories->offset($page*$category_limit);
            $categories = $categories->limit($category_limit);
        }
        $categories = $categories->where('type', 'general');
        $categories = $categories->orderBy('sort', 'asc');
        $categories = $categories->get();

        if($categories->isEmpty()){
            return $this->successOutput(['next_page' => -1], 'No catagories found.');
        }

        $data = [];
        //Get the next page id
        $data['next_page'] = -1;
        if(!empty($category_limit) && is_numeric($category_limit) && Category::count() > ($category_limit*$page+$category_limit)){
            $data['next_page'] = $page + 1;
        }

        foreach($categories as $category){
            $data['categories'][] = [
                'id' => $category->id,
                'name' => $category->name,
                'items' => $this->getItemsByCategory($request, $category->id)
            ];
        }

        return $this->successOutput($data);
    }

    private function getItemsByCategory(Request $request, $category_id){
        $items = Item::query();
        $items = $items->select('id', 'name', 'code', 'author_id');
        $items = $items->where('category_id', $category_id);
        if(!empty($request->get('item_limit'))){
            $items = $items->offset(0);
            $items = $items->limit($request->get('item_limit'));
        }
        $items = $items->orderBy('sort', 'asc');
        $items = $items->get();
        $item_arr = [];
        if(!$items->isEmpty()){
            foreach($items as $item){
                $item_arr[] = [
                    'name' => $item->name,
                    'code' => $item->code,
                    'total_stickers' => !empty($item->total_stickers[0]->total) ? $item->total_stickers[0]->total : 0,
                    'author' => !empty($item->author->name) ? $item->author->name : '',
                ];
            }
        }
        return $item_arr;
    }

    public function getItemsByCategoryId(Request $request, $category_id){
        if(!is_numeric($category_id)){
            $category = Category::where('type', $category_id)->first();

            if(empty($category->id))
                return $this->errorOutput('Invalid category ID.');

            $category_id = $category->id;
        }
        
        $category = Category::find($category_id);
        if(empty($category))
            return $this->errorOutput('Category not found.');

        $data = [
            'id' => $category->id,
            'name' => $category->name,
            'items' =>$this->getItemsByCategory($request, $category->id)
        ];

        return $this->successOutput($data);
    }

    public function getStickersByItemId($code){
        
        $item = Item::where('code', $code)->first();
        if(empty($item->id))
            return $this->errorOutput('Item not found.');

        $stickers = ItemSticker::select('file_name')->where('item_id', $item->id)->get();

        $stickers_arr = [];
        if(!$stickers->isEmpty()){
            foreach($stickers as $sticker){
                if(!empty($sticker->file_name))
                    $stickers_arr[] = $sticker->file_name;
            }
        }

        $data = [
            'name' => $item->name,
            'code' => $item->code,
            'total_stickers' => !empty($item->total_stickers[0]->total) ? $item->total_stickers[0]->total : 0,
            'author' => !empty($item->author->name) ? $item->author->name : '',
            'stickers' => $stickers_arr
        ];

        return $this->successOutput($data);
    }

    /**
     * @param $code //Item's code
     *        $file_name //name of the image
     */
    public function getImage($code, $file_name){
        $root_path = storage_path().'/app/items/'.$code.'/';
        $path = $root_path.$file_name;
        
        if(!file_exists($path)){
            $name_arr = explode("__", $file_name);
            if(count($name_arr) == 1){
                return $this->errorOutput('Original file not found.');
            }

            if(count($name_arr) == 2){
                $original_file_path = $root_path.$name_arr[1];
                if(!file_exists($original_file_path))
                    return $this->errorOutput('Original file not found to create new thumb.');
                //Resize image for desired width
                $thumbnailImage = Image::make($original_file_path)->widen($name_arr[0], function ($constraint) {
                    $constraint->upsize();
                })->save($path);
            }else{
                $this->errorOutput('Invalid action!');
            }
        }

        $type = "image/jpeg";
        header('Content-Type:'.$type);
        header('Content-Length: ' . filesize($path));
        readfile($path);
    }
}
